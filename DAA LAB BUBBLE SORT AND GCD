#include <stdio.h>
void bubbleSort(int array[], int size) {
  for (int step = 0; step < size - 1; ++step) {
    for (int i = 0; i < size - step - 1; ++i) {
      if (array[i] > array[i + 1]) {
        int temp = array[i];
        array[i] = array[i + 1];
        array[i + 1] = temp;
      }
    }
  }
}
void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}

int main() {
  int data[] = {-2, 45, 0, 11, -9};
  
  int size = sizeof(data) / sizeof(data[0]);

  bubbleSort(data, size);
   printf("Sorted Array in Ascending Order:\n");
  printArray(data, size);
}

* ALGORITHM FOR BUBBLE SORT:
Step1: for k = 0 to n-1 repeat Step 2

Step2: for j = k + 1 to n â€“ k repeat

Step3: if A[j] > A[k]

             Swap A[j] and A[k]

             [end of inner for loop]

             [end if outer for loop]
Step4: end

* TIME COMPLEXITY FOR BUBBLE SORT:
Best Case: O(n)
Worst Case: O(n2)
Average Case: O(n2)

GCD PROGRAM 
#include <stdio.h>
int gcd(int a, int b)
{
	if (a == 0)
		return b;
	return gcd(b % a, a);
}
int main()
{
	int a = 60, b = 25;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	a = 35, b = 10;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	a = 31, b = 2;
	printf("GCD(%d, %d) = %d\n", a, b, gcd(a, b));
	return 0;
}

* ALGORITHM FOR GCD OF 2 NUMBERS:
Step 1:  Let  a, b  be the two numbers
Step 2:  a mod b = R
Step 3:  Let  a = b  and  b = R
Step 4:  Repeat Steps 2 and 3 until  a mod b  is greater than 0
Step 5:  GCD = b
Step 6: Finish

* TIME COMPLEXITY FOR GCD OF 2 NUMBERS:
Worst Case: O(log(min(A,B))
Average Case: O(log A)
Best Case: O(1)

